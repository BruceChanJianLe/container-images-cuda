image: docker:stable

# NOTE: The docker:stable-dind service is not used here because --add-runtime=nvidia does not work from DIND and we need the
#       runtime to perform tests

variables:
  # Need a value of two here for checking the manifest in the last commit
  GIT_DEPTH: "2"
  IMAGE_NAME: "${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"

before_script:
  - apk add --no-cache git bash findutils python3 python3-dev curl g++
  - python3 -m ensurepip && \
  - rm -r /usr/lib/python*/ensurepip && \
  - pip3 install --upgrade pip setuptools && \
  - if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
  - if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
  - curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
  - source $HOME/.poetry/env
  - poetry config settings.virtualenvs.create false && poetry install
  - export OS="$(echo ${CI_JOB_NAME} | cut -f1 -d-)"
  - export OS_NAME="$(echo ${CI_JOB_NAME} | cut -f1 -d-| sed 's/[[:digit:]]*//g')"
  - export OS_VERSION="$(echo ${CI_JOB_NAME} | cut -f1 -d- | sed -n 's/.*\([0-9\.]$\)/\1/p')"
  - export CUDA_VERSION="$(echo ${CI_JOB_NAME} | cut -f2 -d- | awk -Fv '{ print $2 }')"
  - export CUDNN_VERSION="$(echo ${CI_JOB_NAME} | cut -f3 -d-)"
  - export IMAGE_TAG_SUFFIX="$(echo $CI_JOB_NAME | awk -f image-suffix.awk)"
  - 'echo "OS: $OS"'
  - 'echo "OS_NAME: $OS_NAME"'
  - 'echo "OS_VERSION: $OS_VERSION"'
  - 'echo "CUDA_VERSION: $CUDA_VERSION"'
  - 'echo "CUDNN_VERSION: $CUDNN_VERSION"'
  - 'echo "IMAGE_TAG_SUFFIX: $IMAGE_TAG_SUFFIX"'
  - if [[ ! -z "${TRIGGER}" ]]; then
        python manager.py generate --os "${OS_NAME}" --os-version "${OS_VERSION}" --cuda-version "${CUDA_VERSION}" ${IMAGE_TAG_SUFFIX:+--tag-suffix $IMAGE_TAG_SUFFIX};
    fi

stages:
  # trigger stage is a workaround until https://gitlab.com/gitlab-org/gitlab-ce/issues/22972 is implemented
  - trigger
  - cuda
  - cudnn
  - test
  - deploy

.tags_template: &tags_definition
  tags:
    - cuda-docker-10.1

.cuda_base_template: &cuda_base_definition
  stage: cuda
  <<: *tags_definition
  script:
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-base-${OS}${IMAGE_TAG_SUFFIX}" "build/${OS}/${CUDA_VERSION}/base"
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}" "build/${OS}/${CUDA_VERSION}/runtime"
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}" "build/${OS}/${CUDA_VERSION}/devel"
    - if [[ "${NO_OS_SUFFIX}" == true ]]; then
        docker tag "${IMAGE_NAME}:${CUDA_VERSION}-base-${OS}${IMAGE_TAG_SUFFIX}" "${IMAGE_NAME}:${CUDA_VERSION}-base";
        docker tag "${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}" "${IMAGE_NAME}:${CUDA_VERSION}-runtime";
        docker tag "${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}" "${IMAGE_NAME}:${CUDA_VERSION}-devel";
      fi
    - if [[ "${LATEST}" == true ]]; then
        docker tag "${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}" "${IMAGE_NAME}:latest";
      fi

.cudnn_template: &cudnn_definition
  stage: cudnn
  <<: *tags_definition
  script:
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                   "build/${OS}/${CUDA_VERSION}/runtime/${CUDNN_VERSION}"
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                   "build/${OS}/${CUDA_VERSION}/devel/${CUDNN_VERSION}"
    - if [[ "${NO_OS_SUFFIX}" == true ]]; then
        docker tag "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}" "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime";
        docker tag "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}" "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel";
      fi

.test_template: &test_definition
  stage: test
  <<: *tags_definition
  script:
    - bash -e ./test/scripts/bats_install.sh
    - bash -e ./test/scripts/run_tests.sh

.deploy_template: &deploy_definition
  stage: deploy
  <<: *tags_definition
  script:
    - python manager.py docker-push
        --image-name "${IMAGE_NAME}"
        --os "${OS_NAME}"
        --os-version "${OS_VERSION}"
        --cuda-version "${CUDA_VERSION}"
        --tag-suffix "${IMAGE_TAG_SUFFIX}" ${LATEST:+"--push-latest"} -n

trigger:
  script:
    - echo CI_COMMIT_MESSAGE:$CI_COMMIT_MESSAGE
    - python manager.py trigger
  only:
    variables:
      - $TRIGGER == null

# centos6-v10.1:
  # <<: *cuda_base_definition

# centos6-v10.1-cudnn7:
  # <<: *cudnn_definition

# centos6-v10.1-test:
  # <<: *test_definition

# centos6-v10.1-deploy:
  # <<: *deploy_definition

# centos6-v10.0:
  # <<: *cuda_base_definition

# centos6-v10.0-cudnn7:
  # <<: *cudnn_definition

# centos6-v10.0-test:
  # <<: *test_definition

# centos6-v10.0-deploy:
  # <<: *deploy_definition

# centos6-v10.1-patched-glibc:
  # <<: *cuda_base_definition

# centos6-v10.1-cudnn7-patched-glibc:
  # <<: *cudnn_definition

# centos6-v10.1-test-patched-glibc:
  # <<: *test_definition

# centos6-v10.1-deploy-patched-glibc:
  # <<: *deploy_definition

# centos6-v10.0-patched-glibc:
  # <<: *cuda_base_definition

# centos6-v10.0-cudnn7-patched-glibc:
  # <<: *cudnn_definition

# centos6-v10.0-test-patched-glibc:
  # <<: *test_definition

# centos6-v10.0-deploy-patched-glibc:
  # <<: *deploy_definition

# centos7-v10.1:
  # variables:
    # LATEST: "true"
    # NO_OS_SUFFIX: "true"
  # <<: *cuda_base_definition

# centos7-v10.1-cudnn7:
  # variables:
    # NO_OS_SUFFIX: "true"
  # <<: *cudnn_definition

# centos7-v10.1-test:
  # <<: *test_definition

# centos7-v10.1-deploy:
  # variables:
    # LATEST: "true"
  # <<: *deploy_definition

# centos7-v10.0:
  # <<: *cuda_base_definition

# centos7-v10.0-cudnn7:
  # <<: *cudnn_definition

# centos7-v10.0-test:
  # <<: *test_definition

# centos7-v10.0-deploy:
  # <<: *deploy_definition

.centos7_cuda9_2_only: &centos7_cuda9_2_only
  only:
    variables:
      - $centos7_cuda9_2 == "true"

centos7-v9.2:
  <<: *cuda_base_definition
  <<: *centos7_cuda9_2_only

centos7-v9.2-cudnn7:
  <<: *cudnn_definition
  <<: *centos7_cuda9_2_only

centos7-v9.2-test:
  <<: *test_definition
  <<: *centos7_cuda9_2_only

centos7-v9.2-deploy:
  <<: *deploy_definition
  <<: *centos7_cuda9_2_only

# ubi7-v10.1:
  # <<: *cuda_base_definition

# ubi7-v10.1-cudnn7:
  # <<: *cudnn_definition

# ubi7-v10.1-test:
  # <<: *test_definition

# ubi7-v10.1-deploy:
  # <<: *deploy_definition

# ubi7-v10.0:
  # <<: *cuda_base_definition

# ubi7-v10.0-cudnn7:
  # <<: *cudnn_definition

# ubi7-v10.0-test:
  # <<: *test_definition

# ubi7-v10.0-deploy:
  # <<: *deploy_definition

.ubi7_cuda9_2_only: &ubi7_cuda9_2_only
  only:
    variables:
      - $ubi7_cuda9_2 == "true"

ubi7-v9.2:
  <<: *cuda_base_definition
  <<: *ubi7_cuda9_2_only

ubi7-v9.2-cudnn7:
  <<: *cudnn_definition
  <<: *ubi7_cuda9_2_only

ubi7-v9.2-test:
  <<: *test_definition
  <<: *ubi7_cuda9_2_only

ubi7-v9.2-deploy:
  <<: *deploy_definition
  <<: *ubi7_cuda9_2_only
