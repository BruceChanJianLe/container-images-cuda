# - DO NOT EDIT - FILE IS AUTOGENERATED
image: docker:stable

# NOTE: The docker:stable-dind service is not used here because --add-runtime=nvidia does not work from DIND and we need the
#       runtime to perform tests

# For multi-arch pipeline stages on x86_64, qemu-user-static and systemd are required with the following configuration:
#
# $ cat /etc/binfmt.d/qemu-static.conf
# :qemu-aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/usr/bin/qemu-aarch64-static:CF
# :qemu-ppc64le:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x15\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\x00:/usr/bin/qemu-ppc64le-static:CF
#
# < reboot or start systemd-binfmt.service >
#
# Check with (on x86_64):
#
# $ systemctl status systemd-binfmt.service
# < service should be started >
#
# $ docker run -it nvidia/cuda-ppc64le:11.0-base-ubuntu18.04-rc
# < container should run>

variables:
  # Need a value of two here for checking the manifest in the last commit
  GIT_DEPTH: "2"
  IMAGE_NAME: "nvidia/cuda"

before_script:
  # WARNING: DO NOT install qemu-${ARCH} alpine package here for use in qemu-user-static multi-arch container builds, there
  # WARNING: is a bug with DNS that causes it to fail with the internal nvidia domains (cuda-repo.nvidia.com)
  # WARNING: SEE: https://gitlab.alpinelinux.org/alpine/aports/issues/8131
  - apk add --no-cache git bash findutils python3 python3-dev curl g++ libmagic
  - python3 -m ensurepip && \
  - rm -r /usr/lib/python*/ensurepip && \
  - pip3 install --upgrade pip setuptools && \
  - if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
  - if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
  - curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
  - source $HOME/.poetry/env
  - poetry config virtualenvs.create false && poetry install
  - export OS="$(echo ${CI_JOB_NAME} | cut -f1 -d-)"
  - export OS_NAME="$(echo ${CI_JOB_NAME} | cut -f1 -d-| sed 's/[[:digit:]\.]*//g')"
  - export OS_VERSION="$(echo ${CI_JOB_NAME} | cut -f1 -d- | sed -n 's/[[:alpha:]]\+\([[:digit:]\.]\+\)/\1/p')"
  - export CUDA_VERSION="$(echo ${CI_JOB_NAME} | cut -f2 -d- | awk -Fv '{ print $2 }')"
  - export CUDNN_VERSION="$(echo ${CI_JOB_NAME} | cut -f3 -d-)"
  - if [[ ! -z ${ARCH} ]] && [[ "${ARCH}" != "x86_64" ]]; then
      if [[ ${ARCH} == "ppc64le" ]]; then
        export IMAGE_NAME="nvidia/cuda-ppc64le";
      else
        export IMAGE_NAME="nvidia/cuda-arm64";
      fi
    fi
  - 'echo "ARCH: $ARCH"'
  - 'echo "OS: $OS"'
  - 'echo "IMAGE_NAME: $IMAGE_NAME"'
  - 'echo "OS_NAME: $OS_NAME"'
  - 'echo "OS_VERSION: $OS_VERSION"'
  - 'echo "CUDA_VERSION: $CUDA_VERSION"'
  - 'echo "CUDNN_VERSION: $CUDNN_VERSION"'
  - 'echo "IMAGE_TAG_SUFFIX: $IMAGE_TAG_SUFFIX"'
  - 'echo "LATEST: $LATEST"'
  - 'echo "NO_OS_SUFFIX: $NO_OS_SUFFIX"'

stages:
  # trigger stage is a workaround until https://gitlab.com/gitlab-org/gitlab-ce/issues/22972 is implemented
  - trigger
  - cuda
  - cudnn
  - test
  - scan
  - deploy

.tags_template: &tags_definition
  tags:
    - cuda-docker

# Only used for CUDA 8.0, will be removed once CUDA 8 support is dropped
.cuda_template_depricated: &cuda_definition_deprecated
  stage: cuda
  <<: *tags_definition
  script:
    - if [[ "${NO_OS_SUFFIX}" == "true" ]]; then
        export TAG_RUNTIME=" -t ${IMAGE_NAME}:${CUDA_VERSION}-runtime ";
        export TAG_DEVEL=" -t ${IMAGE_NAME}:${CUDA_VERSION}-devel ";
      fi
    - if [[ "${LATEST}" == "true" ]]; then
        export TAG_LATEST=" -t ${IMAGE_NAME}:latest ";
      fi
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}" ${TAG_RUNTIME} ${TAG_LATEST} "dist/${OS}/${CUDA_VERSION}/runtime"
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}" ${TAG_DEVEL} --build-arg "IMAGE_NAME=${IMAGE_NAME}" "dist/${OS}/${CUDA_VERSION}/devel"

.cuda_base_template: &cuda_base_definition
  stage: cuda
  <<: *tags_definition
  script:
    - if [[ "${NO_OS_SUFFIX}" == "true" ]]; then
        export TAG_BASE=" -t ${IMAGE_NAME}:${CUDA_VERSION}-base${IMAGE_TAG_SUFFIX} ";
        export TAG_RUNTIME=" -t ${IMAGE_NAME}:${CUDA_VERSION}-runtime${IMAGE_TAG_SUFFIX} ";
        export TAG_DEVEL=" -t ${IMAGE_NAME}:${CUDA_VERSION}-devel${IMAGE_TAG_SUFFIX} ";
      fi
    - if [[ "${LATEST}" == "true" ]]; then
        export TAG_LATEST=" -t ${IMAGE_NAME}:latest ";
      fi
    - if [[ -z $DIST_BASE_PATH ]]; then
        export DIST_BASE_PATH="dist/${OS}/${CUDA_VERSION}/${ARCH}";
      else
        export DIST_BASE_PATH="${DIST_BASE_PATH}/${OS}-${ARCH}";
      fi
    # See https://github.com/multiarch/qemu-user-static for options;
    # It is possible to overide the qemu-${ARCH} binary by moving the following line to after the docker run
    # This will use the qemu-${ARCH} binary installed in the the docker gitlab-runner alpine image "docker:stable"
    # cp /usr/bin/qemu-${ARCH} ${DIST_BASE_PATH}/${OS}/${CUDA_VERSION}/${ARCH}/base/;
    - if [[ "${ARCH}" != "x86_64" ]]; then
        docker run --rm --privileged multiarch/qemu-user-static:register;
      fi
    - 'echo "DIST_BASE_PATH: ${DIST_BASE_PATH}"'
    - 'echo "TAG_LATEST: ${TAG_LATEST}"'
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-base-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_BASE} "${DIST_BASE_PATH}/base"
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_RUNTIME} --build-arg "IMAGE_NAME=${IMAGE_NAME}" "${DIST_BASE_PATH}/runtime"
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_DEVEL} ${TAG_LATEST} --build-arg "IMAGE_NAME=${IMAGE_NAME}" "${DIST_BASE_PATH}/devel"

.cudnn_template: &cudnn_definition
  stage: cudnn
  <<: *tags_definition
  script:
    - if [[ -z $DIST_BASE_PATH ]]; then
        DIST_BASE_PATH="dist/${OS}/${CUDA_VERSION}/${ARCH}";
      else
        DIST_BASE_PATH="${DIST_BASE_PATH}/${OS}-${ARCH}";
      fi
    - 'echo "DIST_BASE_PATH: ${DIST_BASE_PATH}"'
    - if [[ "${NO_OS_SUFFIX}" == "true" ]]; then
        TAG_CUDNN_RUNTIME=" -t ${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime${IMAGE_TAG_SUFFIX} ";
        TAG_CUDNN_DEVEL=" -t ${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel${IMAGE_TAG_SUFFIX} ";
      fi
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-runtime-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_CUDNN_RUNTIME}
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}" "${DIST_BASE_PATH}/runtime/${CUDNN_VERSION}"
    - docker build -t "${IMAGE_NAME}:${CUDA_VERSION}-${CUDNN_VERSION}-devel-${OS}${IMAGE_TAG_SUFFIX}" ${TAG_CUDNN_DEVEL}
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}" "${DIST_BASE_PATH}/devel/${CUDNN_VERSION}"

.test_template: &test_definition
  stage: test
  <<: *tags_definition
  script:
    - bash -e ./test/scripts/bats_install.sh
    - bash -e ./test/scripts/run_tests.sh

.scan_template: &scan_definition
  stage: scan
  <<: *tags_definition
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab-master.nvidia.com/sectooling/scanning/contamer.git
    - cd contamer
    - pip3 install -r requirements.txt
    - python3 contamer.py --external-policy -ls ${IMAGE_NAME}:${CUDA_VERSION}-base-${OS}${IMAGE_TAG_SUFFIX}
    - export CONTAMER_RET=$?
    - >-
      if [[ $CONTAMER_RET -ne 0 ]]; then
        exit 1;
      else
        echo "Contamer return value: ${CONTAMER_RET}";
      fi

.deploy_template: &deploy_definition
  stage: deploy
  <<: *tags_definition
  script:
    - python manager.py ${MANIFEST:+`echo "--manifest ${MANIFEST}"`} push
        --image-name "${IMAGE_NAME}"
        --os "${OS_NAME}"
        --os-version "${OS_VERSION}"
        --cuda-version "${CUDA_VERSION}"
        --arch "${ARCH}"
        ${IMAGE_TAG_SUFFIX:+`echo "--tag-suffix ${IMAGE_TAG_SUFFIX}"`} ${DRY_RUN:+"-n"}

trigger:
  <<: *tags_definition
  variables:
    MANIFEST: "manifests/cuda.yaml"
  script:
    - echo CI_COMMIT_MESSAGE:$CI_COMMIT_MESSAGE
    - python manager.py ${MANIFEST:+`echo "--manifest ${MANIFEST}"`} ${TRIGGER_OVERRIDE:+`echo "--trigger-override ${TRIGGER_OVERRIDE}"`} trigger
  only:
    variables:
      - $TRIGGER == null
      - $TRIGGER_OVERRIDE

.ubuntu18_04_11_0_x86_64_only: &ubuntu18_04_11_0_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
    LATEST: "true"
    NO_OS_SUFFIX: "true"
  only:
    variables:
      - $ubuntu18_04_11_0_x86_64 == "true"
      - $all == "true"

ubuntu18.04-v11.0-x86_64:
  <<: *cuda_base_definition
  <<: *ubuntu18_04_11_0_x86_64_only

ubuntu18.04-v11.0-cudnn8-x86_64:
  needs: ["ubuntu18.04-v11.0-x86_64"]
  <<: *cudnn_definition
  <<: *ubuntu18_04_11_0_x86_64_only

ubuntu18.04-v11.0-test-x86_64:
  needs: ["ubuntu18.04-v11.0-x86_64"]
  <<: *test_definition
  <<: *ubuntu18_04_11_0_x86_64_only

ubuntu18.04-v11.0-scan-x86_64:
  needs: ["ubuntu18.04-v11.0-x86_64"]
  <<: *scan_definition
  <<: *ubuntu18_04_11_0_x86_64_only

ubuntu18.04-v11.0-deploy-x86_64:
  needs: ["ubuntu18.04-v11.0-cudnn8-x86_64", "ubuntu18.04-v11.0-test-x86_64", "ubuntu18.04-v11.0-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubuntu18_04_11_0_x86_64_only

.ubuntu18_04_11_0_ppc64le_only: &ubuntu18_04_11_0_ppc64le_only
  variables:
    ARCH: "ppc64le"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
    LATEST: "true"
    NO_OS_SUFFIX: "true"
  only:
    variables:
      - $ubuntu18_04_11_0_ppc64le == "true"
      - $all == "true"

ubuntu18.04-v11.0-ppc64le:
  <<: *cuda_base_definition
  <<: *ubuntu18_04_11_0_ppc64le_only

ubuntu18.04-v11.0-cudnn8-ppc64le:
  needs: ["ubuntu18.04-v11.0-ppc64le"]
  <<: *cudnn_definition
  <<: *ubuntu18_04_11_0_ppc64le_only

ubuntu18.04-v11.0-test-ppc64le:
  needs: ["ubuntu18.04-v11.0-ppc64le"]
  <<: *test_definition
  <<: *ubuntu18_04_11_0_ppc64le_only

ubuntu18.04-v11.0-scan-ppc64le:
  needs: ["ubuntu18.04-v11.0-ppc64le"]
  <<: *scan_definition
  <<: *ubuntu18_04_11_0_ppc64le_only

ubuntu18.04-v11.0-deploy-ppc64le:
  needs: ["ubuntu18.04-v11.0-cudnn8-ppc64le", "ubuntu18.04-v11.0-test-ppc64le", "ubuntu18.04-v11.0-scan-ppc64le"]
  <<: *deploy_definition
  <<: *ubuntu18_04_11_0_ppc64le_only

.ubuntu16_04_11_0_x86_64_only: &ubuntu16_04_11_0_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
  only:
    variables:
      - $ubuntu16_04_11_0_x86_64 == "true"
      - $all == "true"

ubuntu16.04-v11.0-x86_64:
  <<: *cuda_base_definition
  <<: *ubuntu16_04_11_0_x86_64_only

ubuntu16.04-v11.0-cudnn8-x86_64:
  needs: ["ubuntu16.04-v11.0-x86_64"]
  <<: *cudnn_definition
  <<: *ubuntu16_04_11_0_x86_64_only

ubuntu16.04-v11.0-test-x86_64:
  needs: ["ubuntu16.04-v11.0-x86_64"]
  <<: *test_definition
  <<: *ubuntu16_04_11_0_x86_64_only

ubuntu16.04-v11.0-scan-x86_64:
  needs: ["ubuntu16.04-v11.0-x86_64"]
  <<: *scan_definition
  <<: *ubuntu16_04_11_0_x86_64_only

ubuntu16.04-v11.0-deploy-x86_64:
  needs: ["ubuntu16.04-v11.0-cudnn8-x86_64", "ubuntu16.04-v11.0-test-x86_64", "ubuntu16.04-v11.0-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubuntu16_04_11_0_x86_64_only

.centos8_11_0_x86_64_only: &centos8_11_0_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
  only:
    variables:
      - $centos8_11_0_x86_64 == "true"
      - $all == "true"

centos8-v11.0-x86_64:
  <<: *cuda_base_definition
  <<: *centos8_11_0_x86_64_only

centos8-v11.0-cudnn8-x86_64:
  needs: ["centos8-v11.0-x86_64"]
  <<: *cudnn_definition
  <<: *centos8_11_0_x86_64_only

centos8-v11.0-test-x86_64:
  needs: ["centos8-v11.0-x86_64"]
  <<: *test_definition
  <<: *centos8_11_0_x86_64_only

centos8-v11.0-scan-x86_64:
  needs: ["centos8-v11.0-x86_64"]
  <<: *scan_definition
  <<: *centos8_11_0_x86_64_only

centos8-v11.0-deploy-x86_64:
  needs: ["centos8-v11.0-cudnn8-x86_64", "centos8-v11.0-test-x86_64", "centos8-v11.0-scan-x86_64"]
  <<: *deploy_definition
  <<: *centos8_11_0_x86_64_only

.centos8_11_0_ppc64le_only: &centos8_11_0_ppc64le_only
  variables:
    ARCH: "ppc64le"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
  only:
    variables:
      - $centos8_11_0_ppc64le == "true"
      - $all == "true"

centos8-v11.0-ppc64le:
  <<: *cuda_base_definition
  <<: *centos8_11_0_ppc64le_only

centos8-v11.0-cudnn8-ppc64le:
  needs: ["centos8-v11.0-ppc64le"]
  <<: *cudnn_definition
  <<: *centos8_11_0_ppc64le_only

centos8-v11.0-test-ppc64le:
  needs: ["centos8-v11.0-ppc64le"]
  <<: *test_definition
  <<: *centos8_11_0_ppc64le_only

centos8-v11.0-scan-ppc64le:
  needs: ["centos8-v11.0-ppc64le"]
  <<: *scan_definition
  <<: *centos8_11_0_ppc64le_only

centos8-v11.0-deploy-ppc64le:
  needs: ["centos8-v11.0-cudnn8-ppc64le", "centos8-v11.0-test-ppc64le", "centos8-v11.0-scan-ppc64le"]
  <<: *deploy_definition
  <<: *centos8_11_0_ppc64le_only

.ubi8_11_0_x86_64_only: &ubi8_11_0_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
  only:
    variables:
      - $ubi8_11_0_x86_64 == "true"
      - $all == "true"

ubi8-v11.0-x86_64:
  <<: *cuda_base_definition
  <<: *ubi8_11_0_x86_64_only

ubi8-v11.0-cudnn8-x86_64:
  needs: ["ubi8-v11.0-x86_64"]
  <<: *cudnn_definition
  <<: *ubi8_11_0_x86_64_only

ubi8-v11.0-test-x86_64:
  needs: ["ubi8-v11.0-x86_64"]
  <<: *test_definition
  <<: *ubi8_11_0_x86_64_only

ubi8-v11.0-scan-x86_64:
  needs: ["ubi8-v11.0-x86_64"]
  <<: *scan_definition
  <<: *ubi8_11_0_x86_64_only

ubi8-v11.0-deploy-x86_64:
  needs: ["ubi8-v11.0-cudnn8-x86_64", "ubi8-v11.0-test-x86_64", "ubi8-v11.0-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubi8_11_0_x86_64_only

.ubi8_11_0_ppc64le_only: &ubi8_11_0_ppc64le_only
  variables:
    ARCH: "ppc64le"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
  only:
    variables:
      - $ubi8_11_0_ppc64le == "true"
      - $all == "true"

ubi8-v11.0-ppc64le:
  <<: *cuda_base_definition
  <<: *ubi8_11_0_ppc64le_only

ubi8-v11.0-cudnn8-ppc64le:
  needs: ["ubi8-v11.0-ppc64le"]
  <<: *cudnn_definition
  <<: *ubi8_11_0_ppc64le_only

ubi8-v11.0-test-ppc64le:
  needs: ["ubi8-v11.0-ppc64le"]
  <<: *test_definition
  <<: *ubi8_11_0_ppc64le_only

ubi8-v11.0-scan-ppc64le:
  needs: ["ubi8-v11.0-ppc64le"]
  <<: *scan_definition
  <<: *ubi8_11_0_ppc64le_only

ubi8-v11.0-deploy-ppc64le:
  needs: ["ubi8-v11.0-cudnn8-ppc64le", "ubi8-v11.0-test-ppc64le", "ubi8-v11.0-scan-ppc64le"]
  <<: *deploy_definition
  <<: *ubi8_11_0_ppc64le_only

.centos7_11_0_x86_64_only: &centos7_11_0_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
  only:
    variables:
      - $centos7_11_0_x86_64 == "true"
      - $all == "true"

centos7-v11.0-x86_64:
  <<: *cuda_base_definition
  <<: *centos7_11_0_x86_64_only

centos7-v11.0-cudnn8-x86_64:
  needs: ["centos7-v11.0-x86_64"]
  <<: *cudnn_definition
  <<: *centos7_11_0_x86_64_only

centos7-v11.0-test-x86_64:
  needs: ["centos7-v11.0-x86_64"]
  <<: *test_definition
  <<: *centos7_11_0_x86_64_only

centos7-v11.0-scan-x86_64:
  needs: ["centos7-v11.0-x86_64"]
  <<: *scan_definition
  <<: *centos7_11_0_x86_64_only

centos7-v11.0-deploy-x86_64:
  needs: ["centos7-v11.0-cudnn8-x86_64", "centos7-v11.0-test-x86_64", "centos7-v11.0-scan-x86_64"]
  <<: *deploy_definition
  <<: *centos7_11_0_x86_64_only

.ubi7_11_0_x86_64_only: &ubi7_11_0_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/11.0"
    MANIFEST: "manifests/cuda.yaml"
    IMAGE_TAG_SUFFIX: -rc
  only:
    variables:
      - $ubi7_11_0_x86_64 == "true"
      - $all == "true"

ubi7-v11.0-x86_64:
  <<: *cuda_base_definition
  <<: *ubi7_11_0_x86_64_only

ubi7-v11.0-cudnn8-x86_64:
  needs: ["ubi7-v11.0-x86_64"]
  <<: *cudnn_definition
  <<: *ubi7_11_0_x86_64_only

ubi7-v11.0-test-x86_64:
  needs: ["ubi7-v11.0-x86_64"]
  <<: *test_definition
  <<: *ubi7_11_0_x86_64_only

ubi7-v11.0-scan-x86_64:
  needs: ["ubi7-v11.0-x86_64"]
  <<: *scan_definition
  <<: *ubi7_11_0_x86_64_only

ubi7-v11.0-deploy-x86_64:
  needs: ["ubi7-v11.0-cudnn8-x86_64", "ubi7-v11.0-test-x86_64", "ubi7-v11.0-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubi7_11_0_x86_64_only

.ubuntu18_04_10_2_x86_64_only: &ubuntu18_04_10_2_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
    NO_OS_SUFFIX: "true"
  only:
    variables:
      - $ubuntu18_04_10_2_x86_64 == "true"
      - $all == "true"

ubuntu18.04-v10.2-x86_64:
  <<: *cuda_base_definition
  <<: *ubuntu18_04_10_2_x86_64_only

ubuntu18.04-v10.2-cudnn7-x86_64:
  needs: ["ubuntu18.04-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubuntu18_04_10_2_x86_64_only

ubuntu18.04-v10.2-cudnn8-x86_64:
  needs: ["ubuntu18.04-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubuntu18_04_10_2_x86_64_only

ubuntu18.04-v10.2-test-x86_64:
  needs: ["ubuntu18.04-v10.2-x86_64"]
  <<: *test_definition
  <<: *ubuntu18_04_10_2_x86_64_only

ubuntu18.04-v10.2-scan-x86_64:
  needs: ["ubuntu18.04-v10.2-x86_64"]
  <<: *scan_definition
  <<: *ubuntu18_04_10_2_x86_64_only

ubuntu18.04-v10.2-deploy-x86_64:
  needs: ["ubuntu18.04-v10.2-cudnn7-x86_64","ubuntu18.04-v10.2-cudnn8-x86_64", "ubuntu18.04-v10.2-test-x86_64", "ubuntu18.04-v10.2-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubuntu18_04_10_2_x86_64_only

.ubuntu18_04_10_2_ppc64le_only: &ubuntu18_04_10_2_ppc64le_only
  variables:
    ARCH: "ppc64le"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
    NO_OS_SUFFIX: "true"
  only:
    variables:
      - $ubuntu18_04_10_2_ppc64le == "true"
      - $all == "true"

ubuntu18.04-v10.2-ppc64le:
  <<: *cuda_base_definition
  <<: *ubuntu18_04_10_2_ppc64le_only

ubuntu18.04-v10.2-cudnn7-ppc64le:
  needs: ["ubuntu18.04-v10.2-ppc64le"]
  <<: *cudnn_definition
  <<: *ubuntu18_04_10_2_ppc64le_only

ubuntu18.04-v10.2-cudnn8-ppc64le:
  needs: ["ubuntu18.04-v10.2-ppc64le"]
  <<: *cudnn_definition
  <<: *ubuntu18_04_10_2_ppc64le_only

ubuntu18.04-v10.2-test-ppc64le:
  needs: ["ubuntu18.04-v10.2-ppc64le"]
  <<: *test_definition
  <<: *ubuntu18_04_10_2_ppc64le_only

ubuntu18.04-v10.2-scan-ppc64le:
  needs: ["ubuntu18.04-v10.2-ppc64le"]
  <<: *scan_definition
  <<: *ubuntu18_04_10_2_ppc64le_only

ubuntu18.04-v10.2-deploy-ppc64le:
  needs: ["ubuntu18.04-v10.2-cudnn7-ppc64le","ubuntu18.04-v10.2-cudnn8-ppc64le", "ubuntu18.04-v10.2-test-ppc64le", "ubuntu18.04-v10.2-scan-ppc64le"]
  <<: *deploy_definition
  <<: *ubuntu18_04_10_2_ppc64le_only

.ubuntu18_04_10_2_arm64_only: &ubuntu18_04_10_2_arm64_only
  variables:
    ARCH: "arm64"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
    NO_OS_SUFFIX: "true"
  only:
    variables:
      - $ubuntu18_04_10_2_arm64 == "true"
      - $all == "true"

ubuntu18.04-v10.2-arm64:
  <<: *cuda_base_definition
  <<: *ubuntu18_04_10_2_arm64_only

ubuntu18.04-v10.2-cudnn8-arm64:
  needs: ["ubuntu18.04-v10.2-arm64"]
  <<: *cudnn_definition
  <<: *ubuntu18_04_10_2_arm64_only

ubuntu18.04-v10.2-test-arm64:
  needs: ["ubuntu18.04-v10.2-arm64"]
  <<: *test_definition
  <<: *ubuntu18_04_10_2_arm64_only

ubuntu18.04-v10.2-scan-arm64:
  needs: ["ubuntu18.04-v10.2-arm64"]
  <<: *scan_definition
  <<: *ubuntu18_04_10_2_arm64_only

ubuntu18.04-v10.2-deploy-arm64:
  needs: ["ubuntu18.04-v10.2-cudnn8-arm64", "ubuntu18.04-v10.2-test-arm64", "ubuntu18.04-v10.2-scan-arm64"]
  <<: *deploy_definition
  <<: *ubuntu18_04_10_2_arm64_only

.ubuntu16_04_10_2_x86_64_only: &ubuntu16_04_10_2_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
  only:
    variables:
      - $ubuntu16_04_10_2_x86_64 == "true"
      - $all == "true"

ubuntu16.04-v10.2-x86_64:
  <<: *cuda_base_definition
  <<: *ubuntu16_04_10_2_x86_64_only

ubuntu16.04-v10.2-cudnn7-x86_64:
  needs: ["ubuntu16.04-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubuntu16_04_10_2_x86_64_only

ubuntu16.04-v10.2-cudnn8-x86_64:
  needs: ["ubuntu16.04-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubuntu16_04_10_2_x86_64_only

ubuntu16.04-v10.2-test-x86_64:
  needs: ["ubuntu16.04-v10.2-x86_64"]
  <<: *test_definition
  <<: *ubuntu16_04_10_2_x86_64_only

ubuntu16.04-v10.2-scan-x86_64:
  needs: ["ubuntu16.04-v10.2-x86_64"]
  <<: *scan_definition
  <<: *ubuntu16_04_10_2_x86_64_only

ubuntu16.04-v10.2-deploy-x86_64:
  needs: ["ubuntu16.04-v10.2-cudnn7-x86_64","ubuntu16.04-v10.2-cudnn8-x86_64", "ubuntu16.04-v10.2-test-x86_64", "ubuntu16.04-v10.2-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubuntu16_04_10_2_x86_64_only

.centos8_10_2_x86_64_only: &centos8_10_2_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
  only:
    variables:
      - $centos8_10_2_x86_64 == "true"
      - $all == "true"

centos8-v10.2-x86_64:
  <<: *cuda_base_definition
  <<: *centos8_10_2_x86_64_only

centos8-v10.2-cudnn7-x86_64:
  needs: ["centos8-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *centos8_10_2_x86_64_only

centos8-v10.2-cudnn8-x86_64:
  needs: ["centos8-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *centos8_10_2_x86_64_only

centos8-v10.2-test-x86_64:
  needs: ["centos8-v10.2-x86_64"]
  <<: *test_definition
  <<: *centos8_10_2_x86_64_only

centos8-v10.2-scan-x86_64:
  needs: ["centos8-v10.2-x86_64"]
  <<: *scan_definition
  <<: *centos8_10_2_x86_64_only

centos8-v10.2-deploy-x86_64:
  needs: ["centos8-v10.2-cudnn7-x86_64","centos8-v10.2-cudnn8-x86_64", "centos8-v10.2-test-x86_64", "centos8-v10.2-scan-x86_64"]
  <<: *deploy_definition
  <<: *centos8_10_2_x86_64_only

.ubi8_10_2_x86_64_only: &ubi8_10_2_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
  only:
    variables:
      - $ubi8_10_2_x86_64 == "true"
      - $all == "true"

ubi8-v10.2-x86_64:
  <<: *cuda_base_definition
  <<: *ubi8_10_2_x86_64_only

ubi8-v10.2-cudnn7-x86_64:
  needs: ["ubi8-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubi8_10_2_x86_64_only

ubi8-v10.2-cudnn8-x86_64:
  needs: ["ubi8-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubi8_10_2_x86_64_only

ubi8-v10.2-test-x86_64:
  needs: ["ubi8-v10.2-x86_64"]
  <<: *test_definition
  <<: *ubi8_10_2_x86_64_only

ubi8-v10.2-scan-x86_64:
  needs: ["ubi8-v10.2-x86_64"]
  <<: *scan_definition
  <<: *ubi8_10_2_x86_64_only

ubi8-v10.2-deploy-x86_64:
  needs: ["ubi8-v10.2-cudnn7-x86_64","ubi8-v10.2-cudnn8-x86_64", "ubi8-v10.2-test-x86_64", "ubi8-v10.2-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubi8_10_2_x86_64_only

.centos7_10_2_x86_64_only: &centos7_10_2_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
  only:
    variables:
      - $centos7_10_2_x86_64 == "true"
      - $all == "true"

centos7-v10.2-x86_64:
  <<: *cuda_base_definition
  <<: *centos7_10_2_x86_64_only

centos7-v10.2-cudnn7-x86_64:
  needs: ["centos7-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *centos7_10_2_x86_64_only

centos7-v10.2-cudnn8-x86_64:
  needs: ["centos7-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *centos7_10_2_x86_64_only

centos7-v10.2-test-x86_64:
  needs: ["centos7-v10.2-x86_64"]
  <<: *test_definition
  <<: *centos7_10_2_x86_64_only

centos7-v10.2-scan-x86_64:
  needs: ["centos7-v10.2-x86_64"]
  <<: *scan_definition
  <<: *centos7_10_2_x86_64_only

centos7-v10.2-deploy-x86_64:
  needs: ["centos7-v10.2-cudnn7-x86_64","centos7-v10.2-cudnn8-x86_64", "centos7-v10.2-test-x86_64", "centos7-v10.2-scan-x86_64"]
  <<: *deploy_definition
  <<: *centos7_10_2_x86_64_only

.centos7_10_2_ppc64le_only: &centos7_10_2_ppc64le_only
  variables:
    ARCH: "ppc64le"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
  only:
    variables:
      - $centos7_10_2_ppc64le == "true"
      - $all == "true"

centos7-v10.2-ppc64le:
  <<: *cuda_base_definition
  <<: *centos7_10_2_ppc64le_only

centos7-v10.2-cudnn7-ppc64le:
  needs: ["centos7-v10.2-ppc64le"]
  <<: *cudnn_definition
  <<: *centos7_10_2_ppc64le_only

centos7-v10.2-cudnn8-ppc64le:
  needs: ["centos7-v10.2-ppc64le"]
  <<: *cudnn_definition
  <<: *centos7_10_2_ppc64le_only

centos7-v10.2-test-ppc64le:
  needs: ["centos7-v10.2-ppc64le"]
  <<: *test_definition
  <<: *centos7_10_2_ppc64le_only

centos7-v10.2-scan-ppc64le:
  needs: ["centos7-v10.2-ppc64le"]
  <<: *scan_definition
  <<: *centos7_10_2_ppc64le_only

centos7-v10.2-deploy-ppc64le:
  needs: ["centos7-v10.2-cudnn7-ppc64le","centos7-v10.2-cudnn8-ppc64le", "centos7-v10.2-test-ppc64le", "centos7-v10.2-scan-ppc64le"]
  <<: *deploy_definition
  <<: *centos7_10_2_ppc64le_only

.ubi7_10_2_x86_64_only: &ubi7_10_2_x86_64_only
  variables:
    ARCH: "x86_64"
    DIST_BASE_PATH: "dist/10.2"
    MANIFEST: "manifests/cuda.yaml"
  only:
    variables:
      - $ubi7_10_2_x86_64 == "true"
      - $all == "true"

ubi7-v10.2-x86_64:
  <<: *cuda_base_definition
  <<: *ubi7_10_2_x86_64_only

ubi7-v10.2-cudnn7-x86_64:
  needs: ["ubi7-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubi7_10_2_x86_64_only

ubi7-v10.2-cudnn8-x86_64:
  needs: ["ubi7-v10.2-x86_64"]
  <<: *cudnn_definition
  <<: *ubi7_10_2_x86_64_only

ubi7-v10.2-test-x86_64:
  needs: ["ubi7-v10.2-x86_64"]
  <<: *test_definition
  <<: *ubi7_10_2_x86_64_only

ubi7-v10.2-scan-x86_64:
  needs: ["ubi7-v10.2-x86_64"]
  <<: *scan_definition
  <<: *ubi7_10_2_x86_64_only

ubi7-v10.2-deploy-x86_64:
  needs: ["ubi7-v10.2-cudnn7-x86_64","ubi7-v10.2-cudnn8-x86_64", "ubi7-v10.2-test-x86_64", "ubi7-v10.2-scan-x86_64"]
  <<: *deploy_definition
  <<: *ubi7_10_2_x86_64_only

